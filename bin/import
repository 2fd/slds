#! /usr/bin/env node

const camelcase = require('camelcase');
const fs = require('fs')
const util = require('util');
const https = require('https');

https.get("https://query.yahooapis.com/v1/public/yql?q=select%20data-slds-token%20from%20html%20where%20url%3D'https%3A%2F%2Fwww.lightningdesignsystem.com%2Fdesign-tokens%2F'%20and%20xpath%3D'%2F%2Ftable%2F%2F%40data-slds-token'&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys", function (res) {

    let body = '';
    res.on('data', (buff) => {
        body += buff.toString('ascii')
    });
    res.on('end', () => {
        parseResponse(body)
    });
    res.on('error', (err) => {
        throw err;
    })
})

function parseResponse(body) {

    const tokens = {};
    const res = JSON.parse(body);
    res.query.results.tr.forEach(tr => {
        const data = JSON.parse(tr['data-slds-token']);
        tokens[camelcase(data.name)] = data.value;
    });

    wirteFiles(tokens);
}

function wirteFiles(tokens) {
    const tokenList = Object.keys(tokens).sort();
    wirteJavascriptToken(tokens, tokenList);
    wirteTypescriptToken(tokens, tokenList);
    wirteFlowtypeToken(tokens, tokenList);
}

function wirteJavascriptToken(tokens, tokenList) {

    const max = tokenList.length - 1;
    const data = ['module.exports = {']
        .concat(tokenList.map((token, i) => {
            return util.format(
                '    %s: %j%s',
                token,
                tokens[token],
                i === max ? '' : ','
            );
        }));
    data.push('};');

    file = fs.createWriteStream('./lib/design-tokens.js');
    return file.write(data.join('\n'), 'utf8', () => {
        return file.end()
    });
}

function wirteTypescriptToken(tokens, tokenList) {

    const data = tokenList.map((token, i) => {
        return util.format(
            'export const %s: %s;', token, typeof tokens[token]
        );
    });

    file = fs.createWriteStream('./lib/design-tokens.d.ts');
    return file.write(data.join('\n'), 'utf8', () => {
        return file.end();
    });
}

function wirteFlowtypeToken(tokens, tokenList) {

    const data = ['// @flow']
        .concat(tokenList.map((token, i) => {
            return util.format(
                'declare export const %s: %s;', token, typeof tokens[token]
            );
        }));

    file = fs.createWriteStream('./lib/design-tokens.js.flow');
    return file.write(data.join('\n'), 'utf8', () => {
        return file.end();
    });
}